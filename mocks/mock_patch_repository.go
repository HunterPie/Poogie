// Code generated by MockGen. DO NOT EDIT.
// Source: ./core/persistence/patches/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	patches "github.com/Haato3o/poogie/core/persistence/patches"
	gomock "github.com/golang/mock/gomock"
)

// MockIPatchRepository is a mock of IPatchRepository interface.
type MockIPatchRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIPatchRepositoryMockRecorder
}

// MockIPatchRepositoryMockRecorder is the mock recorder for MockIPatchRepository.
type MockIPatchRepositoryMockRecorder struct {
	mock *MockIPatchRepository
}

// NewMockIPatchRepository creates a new mock instance.
func NewMockIPatchRepository(ctrl *gomock.Controller) *MockIPatchRepository {
	mock := &MockIPatchRepository{ctrl: ctrl}
	mock.recorder = &MockIPatchRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPatchRepository) EXPECT() *MockIPatchRepositoryMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockIPatchRepository) FindAll(ctx context.Context) []patches.Patch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].([]patches.Patch)
	return ret0
}

// FindAll indicates an expected call of FindAll.
func (mr *MockIPatchRepositoryMockRecorder) FindAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockIPatchRepository)(nil).FindAll), ctx)
}
