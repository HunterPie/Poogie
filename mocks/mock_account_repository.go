// Code generated by MockGen. DO NOT EDIT.
// Source: ./core/persistence/account/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	account "github.com/Haato3o/poogie/core/persistence/account"
	gomock "github.com/golang/mock/gomock"
)

// MockIAccountRepository is a mock of IAccountRepository interface.
type MockIAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIAccountRepositoryMockRecorder
}

// MockIAccountRepositoryMockRecorder is the mock recorder for MockIAccountRepository.
type MockIAccountRepositoryMockRecorder struct {
	mock *MockIAccountRepository
}

// NewMockIAccountRepository creates a new mock instance.
func NewMockIAccountRepository(ctrl *gomock.Controller) *MockIAccountRepository {
	mock := &MockIAccountRepository{ctrl: ctrl}
	mock.recorder = &MockIAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAccountRepository) EXPECT() *MockIAccountRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIAccountRepository) Create(ctx context.Context, model account.AccountModel) (account.AccountModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, model)
	ret0, _ := ret[0].(account.AccountModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIAccountRepositoryMockRecorder) Create(ctx, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIAccountRepository)(nil).Create), ctx, model)
}

// DeleteBy mocks base method.
func (m *MockIAccountRepository) DeleteBy(ctx context.Context, userId string) account.AccountModel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBy", ctx, userId)
	ret0, _ := ret[0].(account.AccountModel)
	return ret0
}

// DeleteBy indicates an expected call of DeleteBy.
func (mr *MockIAccountRepositoryMockRecorder) DeleteBy(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBy", reflect.TypeOf((*MockIAccountRepository)(nil).DeleteBy), ctx, userId)
}

// GetById mocks base method.
func (m *MockIAccountRepository) GetById(ctx context.Context, userId string) (account.AccountModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, userId)
	ret0, _ := ret[0].(account.AccountModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIAccountRepositoryMockRecorder) GetById(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIAccountRepository)(nil).GetById), ctx, userId)
}

// IsEmailTaken mocks base method.
func (m *MockIAccountRepository) IsEmailTaken(ctx context.Context, email string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmailTaken", ctx, email)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEmailTaken indicates an expected call of IsEmailTaken.
func (mr *MockIAccountRepositoryMockRecorder) IsEmailTaken(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmailTaken", reflect.TypeOf((*MockIAccountRepository)(nil).IsEmailTaken), ctx, email)
}

// UpdateAvatar mocks base method.
func (m *MockIAccountRepository) UpdateAvatar(ctx context.Context, userId, avatar string) account.AccountModel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAvatar", ctx, userId, avatar)
	ret0, _ := ret[0].(account.AccountModel)
	return ret0
}

// UpdateAvatar indicates an expected call of UpdateAvatar.
func (mr *MockIAccountRepositoryMockRecorder) UpdateAvatar(ctx, userId, avatar interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAvatar", reflect.TypeOf((*MockIAccountRepository)(nil).UpdateAvatar), ctx, userId, avatar)
}

// UpdatePassword mocks base method.
func (m *MockIAccountRepository) UpdatePassword(ctx context.Context, userId, password string) account.AccountModel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", ctx, userId, password)
	ret0, _ := ret[0].(account.AccountModel)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockIAccountRepositoryMockRecorder) UpdatePassword(ctx, userId, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockIAccountRepository)(nil).UpdatePassword), ctx, userId, password)
}

// MockIAccountSessionRepository is a mock of IAccountSessionRepository interface.
type MockIAccountSessionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIAccountSessionRepositoryMockRecorder
}

// MockIAccountSessionRepositoryMockRecorder is the mock recorder for MockIAccountSessionRepository.
type MockIAccountSessionRepositoryMockRecorder struct {
	mock *MockIAccountSessionRepository
}

// NewMockIAccountSessionRepository creates a new mock instance.
func NewMockIAccountSessionRepository(ctrl *gomock.Controller) *MockIAccountSessionRepository {
	mock := &MockIAccountSessionRepository{ctrl: ctrl}
	mock.recorder = &MockIAccountSessionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAccountSessionRepository) EXPECT() *MockIAccountSessionRepositoryMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockIAccountSessionRepository) CreateSession(ctx context.Context, userId string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, userId)
	ret0, _ := ret[0].(string)
	return ret0
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockIAccountSessionRepositoryMockRecorder) CreateSession(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockIAccountSessionRepository)(nil).CreateSession), ctx, userId)
}

// GetUserIdBy mocks base method.
func (m *MockIAccountSessionRepository) GetUserIdBy(ctx context.Context, token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIdBy", ctx, token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIdBy indicates an expected call of GetUserIdBy.
func (mr *MockIAccountSessionRepositoryMockRecorder) GetUserIdBy(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIdBy", reflect.TypeOf((*MockIAccountSessionRepository)(nil).GetUserIdBy), ctx, token)
}

// RevokeSession mocks base method.
func (m *MockIAccountSessionRepository) RevokeSession(ctx context.Context, userId string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeSession", ctx, userId)
	ret0, _ := ret[0].(string)
	return ret0
}

// RevokeSession indicates an expected call of RevokeSession.
func (mr *MockIAccountSessionRepositoryMockRecorder) RevokeSession(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeSession", reflect.TypeOf((*MockIAccountSessionRepository)(nil).RevokeSession), ctx, userId)
}

// MockIAccountBadgesRepository is a mock of IAccountBadgesRepository interface.
type MockIAccountBadgesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIAccountBadgesRepositoryMockRecorder
}

// MockIAccountBadgesRepositoryMockRecorder is the mock recorder for MockIAccountBadgesRepository.
type MockIAccountBadgesRepositoryMockRecorder struct {
	mock *MockIAccountBadgesRepository
}

// NewMockIAccountBadgesRepository creates a new mock instance.
func NewMockIAccountBadgesRepository(ctrl *gomock.Controller) *MockIAccountBadgesRepository {
	mock := &MockIAccountBadgesRepository{ctrl: ctrl}
	mock.recorder = &MockIAccountBadgesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAccountBadgesRepository) EXPECT() *MockIAccountBadgesRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIAccountBadgesRepository) Create(ctx context.Context, userId, badgeId string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Create", ctx, userId, badgeId)
}

// Create indicates an expected call of Create.
func (mr *MockIAccountBadgesRepositoryMockRecorder) Create(ctx, userId, badgeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIAccountBadgesRepository)(nil).Create), ctx, userId, badgeId)
}

// Delete mocks base method.
func (m *MockIAccountBadgesRepository) Delete(ctx context.Context, userId, badgeId string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", ctx, userId, badgeId)
}

// Delete indicates an expected call of Delete.
func (mr *MockIAccountBadgesRepositoryMockRecorder) Delete(ctx, userId, badgeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIAccountBadgesRepository)(nil).Delete), ctx, userId, badgeId)
}

// MockIAccountHuntStatisticSummaryRepository is a mock of IAccountHuntStatisticSummaryRepository interface.
type MockIAccountHuntStatisticSummaryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIAccountHuntStatisticSummaryRepositoryMockRecorder
}

// MockIAccountHuntStatisticSummaryRepositoryMockRecorder is the mock recorder for MockIAccountHuntStatisticSummaryRepository.
type MockIAccountHuntStatisticSummaryRepositoryMockRecorder struct {
	mock *MockIAccountHuntStatisticSummaryRepository
}

// NewMockIAccountHuntStatisticSummaryRepository creates a new mock instance.
func NewMockIAccountHuntStatisticSummaryRepository(ctrl *gomock.Controller) *MockIAccountHuntStatisticSummaryRepository {
	mock := &MockIAccountHuntStatisticSummaryRepository{ctrl: ctrl}
	mock.recorder = &MockIAccountHuntStatisticSummaryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAccountHuntStatisticSummaryRepository) EXPECT() *MockIAccountHuntStatisticSummaryRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIAccountHuntStatisticSummaryRepository) Create(ctx context.Context, userId, badgeId string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Create", ctx, userId, badgeId)
}

// Create indicates an expected call of Create.
func (mr *MockIAccountHuntStatisticSummaryRepositoryMockRecorder) Create(ctx, userId, badgeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIAccountHuntStatisticSummaryRepository)(nil).Create), ctx, userId, badgeId)
}

// Delete mocks base method.
func (m *MockIAccountHuntStatisticSummaryRepository) Delete(ctx context.Context, userId, badgeId string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", ctx, userId, badgeId)
}

// Delete indicates an expected call of Delete.
func (mr *MockIAccountHuntStatisticSummaryRepositoryMockRecorder) Delete(ctx, userId, badgeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIAccountHuntStatisticSummaryRepository)(nil).Delete), ctx, userId, badgeId)
}
