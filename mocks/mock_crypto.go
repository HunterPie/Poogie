// Code generated by MockGen. DO NOT EDIT.
// Source: ./core/crypto/crypto.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockICryptographyService is a mock of ICryptographyService interface.
type MockICryptographyService struct {
	ctrl     *gomock.Controller
	recorder *MockICryptographyServiceMockRecorder
}

// MockICryptographyServiceMockRecorder is the mock recorder for MockICryptographyService.
type MockICryptographyServiceMockRecorder struct {
	mock *MockICryptographyService
}

// NewMockICryptographyService creates a new mock instance.
func NewMockICryptographyService(ctrl *gomock.Controller) *MockICryptographyService {
	mock := &MockICryptographyService{ctrl: ctrl}
	mock.recorder = &MockICryptographyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICryptographyService) EXPECT() *MockICryptographyServiceMockRecorder {
	return m.recorder
}

// Decrypt mocks base method.
func (m *MockICryptographyService) Decrypt(content string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", content)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockICryptographyServiceMockRecorder) Decrypt(content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockICryptographyService)(nil).Decrypt), content)
}

// Encrypt mocks base method.
func (m *MockICryptographyService) Encrypt(content string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", content)
	ret0, _ := ret[0].(string)
	return ret0
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockICryptographyServiceMockRecorder) Encrypt(content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockICryptographyService)(nil).Encrypt), content)
}
